{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _toConsumableArray = require(\"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar _slicedToArray = require(\"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _awaitAsyncGenerator = require(\"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\nvar _wrapAsyncGenerator = require(\"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.Stream = void 0;\nvar Stream = /*#__PURE__*/function () {\n  function Stream(response, controller) {\n    _classCallCheck(this, Stream);\n    this.response = response;\n    this.controller = controller;\n    this.decoder = new SSEDecoder();\n  }\n  _createClass(Stream, [{\n    key: \"iterMessages\",\n    value: function iterMessages() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var lineDecoder, iter, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk, _iterator3, _step3, line, sse, _iterator4, _step4, _line, _sse;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (_this.response.body) {\n                _context.next = 3;\n                break;\n              }\n              _this.controller.abort();\n              throw new Error(\"Attempted to iterate over a response with no body\");\n            case 3:\n              lineDecoder = new LineDecoder();\n              iter = readableStreamAsyncIterable(_this.response.body);\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 7;\n              _iterator = _asyncIterator(iter);\n            case 9:\n              _context.next = 11;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 11:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 35;\n                break;\n              }\n              chunk = _step.value;\n              _iterator3 = _createForOfIteratorHelper(lineDecoder.decode(chunk));\n              _context.prev = 14;\n              _iterator3.s();\n            case 16:\n              if ((_step3 = _iterator3.n()).done) {\n                _context.next = 24;\n                break;\n              }\n              line = _step3.value;\n              sse = _this.decoder.decode(line);\n              if (!sse) {\n                _context.next = 22;\n                break;\n              }\n              _context.next = 22;\n              return sse;\n            case 22:\n              _context.next = 16;\n              break;\n            case 24:\n              _context.next = 29;\n              break;\n            case 26:\n              _context.prev = 26;\n              _context.t0 = _context[\"catch\"](14);\n              _iterator3.e(_context.t0);\n            case 29:\n              _context.prev = 29;\n              _iterator3.f();\n              return _context.finish(29);\n            case 32:\n              _iteratorAbruptCompletion = false;\n              _context.next = 9;\n              break;\n            case 35:\n              _context.next = 41;\n              break;\n            case 37:\n              _context.prev = 37;\n              _context.t1 = _context[\"catch\"](7);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n            case 41:\n              _context.prev = 41;\n              _context.prev = 42;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 46;\n                break;\n              }\n              _context.next = 46;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 46:\n              _context.prev = 46;\n              if (!_didIteratorError) {\n                _context.next = 49;\n                break;\n              }\n              throw _iteratorError;\n            case 49:\n              return _context.finish(46);\n            case 50:\n              return _context.finish(41);\n            case 51:\n              _iterator4 = _createForOfIteratorHelper(lineDecoder.flush());\n              _context.prev = 52;\n              _iterator4.s();\n            case 54:\n              if ((_step4 = _iterator4.n()).done) {\n                _context.next = 62;\n                break;\n              }\n              _line = _step4.value;\n              _sse = _this.decoder.decode(_line);\n              if (!_sse) {\n                _context.next = 60;\n                break;\n              }\n              _context.next = 60;\n              return _sse;\n            case 60:\n              _context.next = 54;\n              break;\n            case 62:\n              _context.next = 67;\n              break;\n            case 64:\n              _context.prev = 64;\n              _context.t2 = _context[\"catch\"](52);\n              _iterator4.e(_context.t2);\n            case 67:\n              _context.prev = 67;\n              _iterator4.f();\n              return _context.finish(67);\n            case 70:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[7, 37, 41, 51], [14, 26, 29, 32], [42,, 46, 50], [52, 64, 67, 70]]);\n      }))();\n    }\n  }, {\n    key: Symbol.asyncIterator,\n    value: function value() {\n      var _this2 = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var done, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, sse;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              done = false;\n              _context2.prev = 1;\n              _iteratorAbruptCompletion2 = false;\n              _didIteratorError2 = false;\n              _context2.prev = 4;\n              _iterator2 = _asyncIterator(_this2.iterMessages());\n            case 6:\n              _context2.next = 8;\n              return _awaitAsyncGenerator(_iterator2.next());\n            case 8:\n              if (!(_iteratorAbruptCompletion2 = !(_step2 = _context2.sent).done)) {\n                _context2.next = 29;\n                break;\n              }\n              sse = _step2.value;\n              if (!done) {\n                _context2.next = 12;\n                break;\n              }\n              return _context2.abrupt(\"continue\", 26);\n            case 12:\n              if (!sse.data.startsWith('[DONE]')) {\n                _context2.next = 15;\n                break;\n              }\n              done = true;\n              return _context2.abrupt(\"continue\", 26);\n            case 15:\n              if (!(sse.event === null)) {\n                _context2.next = 26;\n                break;\n              }\n              _context2.prev = 16;\n              _context2.next = 19;\n              return JSON.parse(sse.data);\n            case 19:\n              _context2.next = 26;\n              break;\n            case 21:\n              _context2.prev = 21;\n              _context2.t0 = _context2[\"catch\"](16);\n              console.error(\"Could not parse message into JSON:\", sse.data);\n              console.error(\"From chunk:\", sse.raw);\n              throw _context2.t0;\n            case 26:\n              _iteratorAbruptCompletion2 = false;\n              _context2.next = 6;\n              break;\n            case 29:\n              _context2.next = 35;\n              break;\n            case 31:\n              _context2.prev = 31;\n              _context2.t1 = _context2[\"catch\"](4);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context2.t1;\n            case 35:\n              _context2.prev = 35;\n              _context2.prev = 36;\n              if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                _context2.next = 40;\n                break;\n              }\n              _context2.next = 40;\n              return _awaitAsyncGenerator(_iterator2.return());\n            case 40:\n              _context2.prev = 40;\n              if (!_didIteratorError2) {\n                _context2.next = 43;\n                break;\n              }\n              throw _iteratorError2;\n            case 43:\n              return _context2.finish(40);\n            case 44:\n              return _context2.finish(35);\n            case 45:\n              done = true;\n              _context2.next = 53;\n              break;\n            case 48:\n              _context2.prev = 48;\n              _context2.t2 = _context2[\"catch\"](1);\n              if (!(_context2.t2 instanceof Error && _context2.t2.name === 'AbortError')) {\n                _context2.next = 52;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 52:\n              throw _context2.t2;\n            case 53:\n              _context2.prev = 53;\n              // If the user `break`s, abort the ongoing request.\n              if (!done) _this2.controller.abort();\n              return _context2.finish(53);\n            case 56:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[1, 48, 53, 56], [4, 31, 35, 45], [16, 21], [36,, 40, 44]]);\n      }))();\n    }\n  }]);\n  return Stream;\n}();\nexports.Stream = Stream;\nvar SSEDecoder = /*#__PURE__*/function () {\n  function SSEDecoder() {\n    _classCallCheck(this, SSEDecoder);\n    this.event = null;\n    this.data = [];\n    this.chunks = [];\n  }\n  _createClass(SSEDecoder, [{\n    key: \"decode\",\n    value: function decode(line) {\n      if (line.endsWith('\\r')) {\n        line = line.substring(0, line.length - 1);\n      }\n      if (!line) {\n        // empty line and we didn't previously encounter any messages\n        if (!this.event && !this.data.length) return null;\n        var sse = {\n          event: this.event,\n          data: this.data.join('\\n'),\n          raw: this.chunks\n        };\n        this.event = null;\n        this.data = [];\n        this.chunks = [];\n        return sse;\n      }\n      this.chunks.push(line);\n      if (line.startsWith(':')) {\n        return null;\n      }\n      var _partition = partition(line, ':'),\n        _partition2 = _slicedToArray(_partition, 3),\n        fieldname = _partition2[0],\n        _ = _partition2[1],\n        value = _partition2[2];\n      if (value.startsWith(' ')) {\n        value = value.substring(1);\n      }\n      if (fieldname === 'event') {\n        this.event = value;\n      } else if (fieldname === 'data') {\n        this.data.push(value);\n      }\n      return null;\n    }\n  }]);\n  return SSEDecoder;\n}();\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nvar LineDecoder = /*#__PURE__*/function () {\n  function LineDecoder() {\n    _classCallCheck(this, LineDecoder);\n    this.buffer = [];\n    this.trailingCR = false;\n  }\n  _createClass(LineDecoder, [{\n    key: \"decode\",\n    value: function decode(chunk) {\n      var text = this.decodeText(chunk);\n      if (this.trailingCR) {\n        text = '\\r' + text;\n        this.trailingCR = false;\n      }\n      if (text.endsWith('\\r')) {\n        this.trailingCR = true;\n        text = text.slice(0, -1);\n      }\n      if (!text) {\n        return [];\n      }\n      var trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || '');\n      var lines = text.split(LineDecoder.NEWLINE_REGEXP);\n      if (lines.length === 1 && !trailingNewline) {\n        this.buffer.push(lines[0]);\n        return [];\n      }\n      if (this.buffer.length > 0) {\n        lines = [this.buffer.join('') + lines[0]].concat(_toConsumableArray(lines.slice(1)));\n        this.buffer = [];\n      }\n      if (!trailingNewline) {\n        this.buffer = [lines.pop() || ''];\n      }\n      return lines;\n    }\n  }, {\n    key: \"decodeText\",\n    value: function decodeText(bytes) {\n      var _a;\n      if (bytes == null) return '';\n      if (typeof bytes === 'string') return bytes;\n      // Node:\n      if (typeof Buffer !== 'undefined') {\n        if (bytes instanceof Buffer) {\n          return bytes.toString();\n        }\n        if (bytes instanceof Uint8Array) {\n          return Buffer.from(bytes).toString();\n        }\n        throw new Error(\"Unexpected: received non-Uint8Array (\".concat(bytes.constructor.name, \") stream chunk in an environment with a global \\\"Buffer\\\" defined, which this library assumes to be Node. Please report this error.\"));\n      }\n      // Browser\n      if (typeof TextDecoder !== 'undefined') {\n        if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n          (_a = this.textDecoder) !== null && _a !== void 0 ? _a : this.textDecoder = new TextDecoder('utf8');\n          return this.textDecoder.decode(bytes);\n        }\n        throw new Error(\"Unexpected: received non-Uint8Array/ArrayBuffer (\".concat(bytes.constructor.name, \") in a web platform. Please report this error.\"));\n      }\n      throw new Error(\"Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.\");\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (!this.buffer.length && !this.trailingCR) {\n        return [];\n      }\n      var lines = [this.buffer.join('')];\n      this.buffer = [];\n      this.trailingCR = false;\n      return lines;\n    }\n  }]);\n  return LineDecoder;\n}(); // prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set(['\\n', '\\r', '\\x0b', '\\x0c', '\\x1c', '\\x1d', '\\x1e', '\\x85', \"\\u2028\", \"\\u2029\"]);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r\\x0b\\x0c\\x1c\\x1d\\x1e\\x85\\u2028\\u2029]/g;\nfunction partition(str, delimiter) {\n  var index = str.indexOf(delimiter);\n  if (index !== -1) {\n    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n  }\n  return [str, '', ''];\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nfunction readableStreamAsyncIterable(stream) {\n  if (stream[Symbol.asyncIterator]) return stream;\n  var reader = stream.getReader();\n  return _defineProperty({\n    next: function () {\n      var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return reader.read();\n            case 3:\n              result = _context3.sent;\n              if (result === null || result === void 0 ? void 0 : result.done) reader.releaseLock(); // release lock when stream becomes closed\n              return _context3.abrupt(\"return\", result);\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](0);\n              reader.releaseLock(); // release lock when stream becomes errored\n              throw _context3.t0;\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 8]]);\n      }));\n      function next() {\n        return _next.apply(this, arguments);\n      }\n      return next;\n    }(),\n    return: function () {\n      var _return2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var cancelPromise;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              cancelPromise = reader.cancel();\n              reader.releaseLock();\n              _context4.next = 4;\n              return cancelPromise;\n            case 4:\n              return _context4.abrupt(\"return\", {\n                done: true,\n                value: undefined\n              });\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      function _return() {\n        return _return2.apply(this, arguments);\n      }\n      return _return;\n    }()\n  }, Symbol.asyncIterator, function () {\n    return this;\n  });\n}","map":null,"metadata":{},"sourceType":"script"}