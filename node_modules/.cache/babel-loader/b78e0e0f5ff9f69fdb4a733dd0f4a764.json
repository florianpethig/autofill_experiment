{"ast":null,"code":"import _objectSpread from \"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _asyncToGenerator from \"/home/smnc/Documents/weizenbaum/autofill_experiment2/autofill_experiment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\nimport { FormData, File } from 'openai/_shims/formdata';\nimport { getMultipartRequestOptions } from 'openai/_shims/getMultipartRequestOptions';\nimport { fileFromPath } from 'openai/_shims/fileFromPath';\nimport { isFsReadStream } from 'openai/_shims/node-readable';\nexport { fileFromPath };\nexport var isResponseLike = function isResponseLike(value) {\n  return value != null && typeof value === 'object' && typeof value.url === 'string' && typeof value.blob === 'function';\n};\nexport var isFileLike = function isFileLike(value) {\n  return value != null && typeof value === 'object' && typeof value.name === 'string' && typeof value.lastModified === 'number' && isBlobLike(value);\n};\n/**\n * The BlobLike type omits arrayBuffer() because @types/node-fetch@^2.6.4 lacks it; but this check\n * adds the arrayBuffer() method type because it is available and used at runtime\n */\nexport var isBlobLike = function isBlobLike(value) {\n  return value != null && typeof value === 'object' && typeof value.size === 'number' && typeof value.type === 'string' && typeof value.text === 'function' && typeof value.slice === 'function' && typeof value.arrayBuffer === 'function';\n};\nexport var isUploadable = function isUploadable(value) {\n  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);\n};\n/**\n * Helper for creating a {@link File} to pass to an SDK upload method from a variety of different data formats\n * @param value the raw content of the file.  Can be an {@link Uploadable}, {@link BlobLikePart}, or {@link AsyncIterable} of {@link BlobLikePart}s\n * @param {string=} name the name of the file. If omitted, toFile will try to determine a file name from bits if possible\n * @param {Object=} options additional properties\n * @param {string=} options.type the MIME type of the content\n * @param {number=} options.lastModified the last modified timestamp\n * @returns a {@link File} with the given properties\n */\nexport function toFile(_x, _x2) {\n  return _toFile.apply(this, arguments);\n}\nfunction _toFile() {\n  _toFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(value, name) {\n    var options,\n      _a,\n      _b,\n      _c,\n      blob,\n      bits,\n      type,\n      _args5 = arguments;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          options = _args5.length > 2 && _args5[2] !== undefined ? _args5[2] : {};\n          _context5.next = 3;\n          return value;\n        case 3:\n          value = _context5.sent;\n          if (!isResponseLike(value)) {\n            _context5.next = 10;\n            break;\n          }\n          _context5.next = 7;\n          return value.blob();\n        case 7:\n          blob = _context5.sent;\n          name || (name = (_a = new URL(value.url).pathname.split(/[\\\\/]/).pop()) !== null && _a !== void 0 ? _a : 'unknown_file');\n          return _context5.abrupt(\"return\", new File([blob], name, options));\n        case 10:\n          _context5.next = 12;\n          return getBytes(value);\n        case 12:\n          bits = _context5.sent;\n          name || (name = (_b = getName(value)) !== null && _b !== void 0 ? _b : 'unknown_file');\n          if (!options.type) {\n            type = (_c = bits[0]) === null || _c === void 0 ? void 0 : _c.type;\n            if (typeof type === 'string') {\n              options = _objectSpread({}, options, {\n                type: type\n              });\n            }\n          }\n          return _context5.abrupt(\"return\", new File(bits, name, options));\n        case 16:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return _toFile.apply(this, arguments);\n}\nfunction getBytes(_x3) {\n  return _getBytes.apply(this, arguments);\n}\nfunction _getBytes() {\n  _getBytes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(value) {\n    var _a, parts, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          parts = [];\n          if (!(typeof value === 'string' || ArrayBuffer.isView(value) ||\n          // includes Uint8Array, Buffer, etc.\n          value instanceof ArrayBuffer)) {\n            _context6.next = 5;\n            break;\n          }\n          parts.push(value);\n          _context6.next = 45;\n          break;\n        case 5:\n          if (!isBlobLike(value)) {\n            _context6.next = 13;\n            break;\n          }\n          _context6.t0 = parts;\n          _context6.next = 9;\n          return value.arrayBuffer();\n        case 9:\n          _context6.t1 = _context6.sent;\n          _context6.t0.push.call(_context6.t0, _context6.t1);\n          _context6.next = 45;\n          break;\n        case 13:\n          if (!isAsyncIterableIterator(value) // includes Readable, ReadableStream, etc.\n          ) {\n            _context6.next = 44;\n            break;\n          }\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context6.prev = 16;\n          _iterator = _asyncIterator(value);\n        case 18:\n          _context6.next = 20;\n          return _iterator.next();\n        case 20:\n          if (!(_iteratorAbruptCompletion = !(_step = _context6.sent).done)) {\n            _context6.next = 26;\n            break;\n          }\n          chunk = _step.value;\n          parts.push(chunk); // TODO, consider validating?\n        case 23:\n          _iteratorAbruptCompletion = false;\n          _context6.next = 18;\n          break;\n        case 26:\n          _context6.next = 32;\n          break;\n        case 28:\n          _context6.prev = 28;\n          _context6.t2 = _context6[\"catch\"](16);\n          _didIteratorError = true;\n          _iteratorError = _context6.t2;\n        case 32:\n          _context6.prev = 32;\n          _context6.prev = 33;\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context6.next = 37;\n            break;\n          }\n          _context6.next = 37;\n          return _iterator.return();\n        case 37:\n          _context6.prev = 37;\n          if (!_didIteratorError) {\n            _context6.next = 40;\n            break;\n          }\n          throw _iteratorError;\n        case 40:\n          return _context6.finish(37);\n        case 41:\n          return _context6.finish(32);\n        case 42:\n          _context6.next = 45;\n          break;\n        case 44:\n          throw new Error(\"Unexpected data type: \".concat(typeof value, \"; constructor: \").concat((_a = value === null || value === void 0 ? void 0 : value.constructor) === null || _a === void 0 ? void 0 : _a.name, \"; props: \").concat(propsForError(value)));\n        case 45:\n          return _context6.abrupt(\"return\", parts);\n        case 46:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6, null, [[16, 28, 32, 42], [33,, 37, 41]]);\n  }));\n  return _getBytes.apply(this, arguments);\n}\nfunction propsForError(value) {\n  var props = Object.getOwnPropertyNames(value);\n  return \"[\".concat(props.map(function (p) {\n    return \"\\\"\".concat(p, \"\\\"\");\n  }).join(', '), \"]\");\n}\nfunction getName(value) {\n  var _a;\n  return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) || (\n  // For fs.ReadStream\n  (_a = getStringFromMaybeBuffer(value.path)) === null || _a === void 0 ? void 0 : _a.split(/[\\\\/]/).pop());\n}\nvar getStringFromMaybeBuffer = function getStringFromMaybeBuffer(x) {\n  if (typeof x === 'string') return x;\n  if (typeof Buffer !== 'undefined' && x instanceof Buffer) return String(x);\n  return undefined;\n};\nvar isAsyncIterableIterator = function isAsyncIterableIterator(value) {\n  return value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\n};\nexport var MultipartBody = /*#__PURE__*/function () {\n  function MultipartBody(body) {\n    _classCallCheck(this, MultipartBody);\n    this.body = body;\n  }\n  _createClass(MultipartBody, [{\n    key: Symbol.toStringTag,\n    get: function get() {\n      return 'MultipartBody';\n    }\n  }]);\n  return MultipartBody;\n}();\nexport var isMultipartBody = function isMultipartBody(body) {\n  return body && typeof body === 'object' && body.body && body[Symbol.toStringTag] === 'MultipartBody';\n};\n/**\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\n * Otherwise returns the request as is.\n */\nexport var maybeMultipartFormRequestOptions = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(opts) {\n    var form;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (hasUploadableValue(opts.body)) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", opts);\n        case 2:\n          _context.next = 4;\n          return createForm(opts.body);\n        case 4:\n          form = _context.sent;\n          return _context.abrupt(\"return\", getMultipartRequestOptions(form, opts));\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function maybeMultipartFormRequestOptions(_x4) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var multipartFormRequestOptions = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(opts) {\n    var form;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return createForm(opts.body);\n        case 2:\n          form = _context2.sent;\n          return _context2.abrupt(\"return\", getMultipartRequestOptions(form, opts));\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function multipartFormRequestOptions(_x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var createForm = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(body) {\n    var form;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          form = new FormData();\n          _context3.next = 3;\n          return Promise.all(Object.entries(body || {}).map(function (_ref4) {\n            var _ref5 = _slicedToArray(_ref4, 2),\n              key = _ref5[0],\n              value = _ref5[1];\n            return addFormValue(form, key, value);\n          }));\n        case 3:\n          return _context3.abrupt(\"return\", form);\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return function createForm(_x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar hasUploadableValue = function hasUploadableValue(value) {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (var k in value) {\n      if (hasUploadableValue(value[k])) return true;\n    }\n  }\n  return false;\n};\nvar addFormValue = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(form, key, value) {\n    var file;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!(value === undefined)) {\n            _context4.next = 2;\n            break;\n          }\n          return _context4.abrupt(\"return\");\n        case 2:\n          if (!(value == null)) {\n            _context4.next = 4;\n            break;\n          }\n          throw new TypeError(\"Received null for \\\"\".concat(key, \"\\\"; to pass null in FormData, you must use the string 'null'\"));\n        case 4:\n          if (!(typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean')) {\n            _context4.next = 8;\n            break;\n          }\n          form.append(key, String(value));\n          _context4.next = 26;\n          break;\n        case 8:\n          if (!isUploadable(value)) {\n            _context4.next = 15;\n            break;\n          }\n          _context4.next = 11;\n          return toFile(value);\n        case 11:\n          file = _context4.sent;\n          form.append(key, file);\n          _context4.next = 26;\n          break;\n        case 15:\n          if (!Array.isArray(value)) {\n            _context4.next = 20;\n            break;\n          }\n          _context4.next = 18;\n          return Promise.all(value.map(function (entry) {\n            return addFormValue(form, key + '[]', entry);\n          }));\n        case 18:\n          _context4.next = 26;\n          break;\n        case 20:\n          if (!(typeof value === 'object')) {\n            _context4.next = 25;\n            break;\n          }\n          _context4.next = 23;\n          return Promise.all(Object.entries(value).map(function (_ref7) {\n            var _ref8 = _slicedToArray(_ref7, 2),\n              name = _ref8[0],\n              prop = _ref8[1];\n            return addFormValue(form, \"\".concat(key, \"[\").concat(name, \"]\"), prop);\n          }));\n        case 23:\n          _context4.next = 26;\n          break;\n        case 25:\n          throw new TypeError(\"Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got \".concat(value, \" instead\"));\n        case 26:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return function addFormValue(_x7, _x8, _x9) {\n    return _ref6.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}